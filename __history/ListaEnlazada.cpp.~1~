//---------------------------------------------------------------------------

#pragma hdrstop

#include "ListaEnlazada.h"



//---------------------------------------------------------------------------
#pragma package(smart_init)
ListaEnlazada *ListaE;

//--------------------------------------



	void ListaEnlazada::Crear(){

	  longitud=0;
	  PtrElementos=NULL;

  }
   int ListaEnlazada::Fin(){
   int PtrFin=-1;
		if (Vacia()) {
			throw new Exception("Error: Lista Vacia");
		}else {
		 int x = PtrElementos;
		 while (x!=-1){
			  PtrFin=x;
			  x=TDAMemoria->ObtenerDato(x,2);

			 }

		 }
	  return PtrFin;
   }

	 int ListaEnlazada::Primero(){
		if (!Vacia()) {
			return PtrElementos;

		  }	else{
			throw new Exception("Error: Lista Vacia");

		}

	 }

	 int ListaEnlazada::Siguiente(int direccion){
	 if (Vacia()) {
		// throw new Exception("Error: Lista Vacia");
		 return -1;
	 }else{
		 if (direccion==Fin()) {
				 //throw new Exception("Error: La direccion enviada es la ultima y no tiene siguiente");
		  return -1;
		 }else
			return TDAMemoria->ObtenerDato(direccion,2);


		}


	 }

	 int ListaEnlazada::Anterior(int direccion){
		if (Vacia()) {
			throw new Exception("Error: Lista Vacia");
		}else{
			 if (direccion==Primero()) {
			 throw new Exception("Error: La direccion enviada es la primera y no tiene anterior");

			 }else{
				 int x=PtrElementos;
				 int ant=-1;
				  while (x!=-1){

						if (x==direccion) {
						  return ant;

						}else{
							 ant=x;
							 x=TDAMemoria->ObtenerDato(x,2);

						   }
					}
				 }
		   }
	 }




   int ListaEnlazada::Longitud()
{
	return longitud;
}


   bool ListaEnlazada::Vacia(){

	return longitud==0;
}

   void ListaEnlazada::Inserta(int direccion, int elemento){

	int x=TDAMemoria->PedirEspacio(2);
		if (x!=-1) {
		   TDAMemoria->PonerDato(x,1,elemento);
		   TDAMemoria->PonerDato(x,2,-1);

		if (Vacia()) {
			PtrElementos=x;
			longitud=1;
		}else{
		   longitud = longitud +1;
			if (direccion==Primero()) {
				TDAMemoria->PonerDato(x,2,direccion);
				PtrElementos=x;
			}else {
				 int ant=Anterior(direccion);
					  TDAMemoria->PonerDato(ant,2,x);
					  TDAMemoria->PonerDato(x,2,direccion);
			   }
		  }
	 }else{

		  throw new Exception("Error: error del espacio memoria");
		}
   }



   void ListaEnlazada::Modifica(int direccion, int elemento){

		if (Vacia()) {
			throw new Exception("Error: ListaVacia");
		}else{
		TDAMemoria->PonerDato(direccion,1,elemento);

		}

   }


   void ListaEnlazada::Suprime(int direccion){
	  if (Vacia()) {
	  throw new Exception("Error: Lista Vacia");

	  } else{
	  if (direccion==PtrElementos) {
	  int x=PtrElementos;
	  PtrElementos=TDAMemoria->ObtenerDato(PtrElementos,2);
	  TDAMemoria->LiberarEspacio(x);
	  TDAMemoria->PonerDato(x,1,0);
	   TDAMemoria->PonerDato(x,2,0);

	  }  else{
		int ant = Anterior(direccion);
	   TDAMemoria->PonerDato(ant,2,Siguiente(direccion));
		TDAMemoria->LiberarEspacio(direccion);
		TDAMemoria->PonerDato(direccion,1,0);
	   TDAMemoria->PonerDato(direccion,2,0);
		}
   }

	 longitud=longitud-1;
  }
   int ListaEnlazada::Recupera(int dir)
{
 if (Vacia()) {
	 throw new Exception("Error: Lista Vacia");
 }  else
 return TDAMemoria->ObtenerDato(dir,1);
}

   void ListaEnlazada::Anula()
{
   Crear();
 }



   void ListaEnlazada::Mostrar(int x, int y,TCanvas *t){

   int and=90, anl=60, al=30;


	t->Font->Height=20;	//

	t->Font->Height=19;
			for(int  i=1; i<=ListaE->Longitud(); i++)
	{
		// rectangulo de direccion
		t->TextOut(x-195,y+(i*al)+8,IntToStr(ListaE->MostrarDir(i)));

		//rectangulo de dato
		t->RoundRect(x-165,y+(i*al),x+and+and-50,y+(i+1)*al,15,15);
		t->TextOut(x-30,y+i*al+8,IntToStr(ListaE->MostrarDato(i)));

		//rectangulo de links
		  t->RoundRect(x+and+and-50,y+(i*al),x+and+and-90,y+(i+1)*al,15,15);
		 t->TextOut(x+and+and-75,y+i*al+8,IntToStr(ListaE->MostrarSig(i)));

	}

	t->Brush->Color = clWhite;
	t->Font->Size = 14;
	t->TextOut(x-200, y, "Dir"); // Imprime la palabra Dir
	t->TextOut(x-50, y, "Dato"); // Imprime la palabra Dato
   }



   int ListaEnlazada::Localiza(int Ele)
{
	if (Vacia()) {
	  // throw new Exception("Error: Lista Vacia");
	   return -1;
	}  else {
		int x = MostrarPtrEle();
		while (x!= -1)
			{
			 int p = Recupera(x);
			 if (p==Ele) {
					return x;
			 }  else    {
			  x = Siguiente(x);
			  }
			}

	}
}

void ListaEnlazada::EliminaDato(int Ele)
{
	if (Vacia()) {
	   throw new Exception("Error: lista vacia");
	}  else {
	while (Localiza(Ele)!= -1) {
	  int x = Localiza(Ele);
	  Suprime(x);
	  //TDAMemoria->LiberarEspacio(x);
	}
	}
 // return;
}



   int ListaEnlazada::MostrarPtrEle() {
 return PtrElementos;

}

   int ListaEnlazada::MostrarDir(int Nro) {
int c;
  int b=1;
  int x = PtrElementos;
   int y = TDAMemoria->ObtenerDato(PtrElementos,2);
   if (Nro==1) {
		 c = x;
	   }
  while (b < Nro) {
	   c = y;
	   y =TDAMemoria->ObtenerDato(y,2);
	   b = b+1;
	   }
return c;
}

int ListaEnlazada::MostrarDato(int Nro) {
int c;
  int b=1;
  int x = PtrElementos;
   int y = TDAMemoria->ObtenerDato(PtrElementos,2);

   if (Nro==1) {
		 c = TDAMemoria->ObtenerDato(x,1);
	   }
  while (b < Nro) {
	   int r = TDAMemoria->ObtenerDato(y,1);
	   c = r;
	   y =TDAMemoria->ObtenerDato(y,2);
	   b = b+1;
	   }

return c;
  }

  int ListaEnlazada::MostrarSig(int Nro) {
int c;
  int b=1;
  int x = PtrElementos;
   int y = TDAMemoria->ObtenerDato(PtrElementos,2);

   if (Nro==1) {
		 c = y;
	   }
  while (b < Nro) {
	   y =TDAMemoria->ObtenerDato(y,2);
	   c = y;
	   b = b+1;
	   }

return c;
  }

  bool ListaEnlazada::RecuperaC(int Ele){
  bool resp = false;
   int x = Localiza(Ele);
   if (x != -1) {
	  resp = true;
   }
   return resp;
  }
