//---------------------------------------------------------------------------

#pragma hdrstop

#include "PolinomioConVectores.h"
#include <string.h>
#include <string>
//---------------------------------------------------------------------------
#pragma package(smart_init)

void Polinomio::Crear(){
 nt=0;

   }
bool Polinomio::Es_Cero(){

return nt==0;
  }

int Polinomio::Grado(){
   if (nt>0) {
	   int max=VE[1];
	   int i;
	   for (i = 0; i < nt; i++) {
			   if (VE[i]>max) {
				   max=VE[i];
			   }
	   }
	   return max;
   }else{
   throw new Exception("Error: no hay terminos");
   }


 }

 int Polinomio::Num_De_Terminos(){
 return nt;
 }

int Polinomio::Coeficiente(int Exponente){
   if (Exponente>=0 && Exponente<=Grado()) {
		int i;
		 for (i = 0;i<nt; i++) {
			  if (VE[i]==Exponente) {
				 return VC[i];
			  }
		 }
   }else{
	throw new Exception("Error: no existe coeficiente con ese exponente");

  }

 }

   int Polinomio::Get_Exponente(int NumDeTermino){

	int x = VE[NumDeTermino-1];
	return x;

   }

void Polinomio::Poner_Termino(int Coeficiente,int Exponente){
	 int lug=nt;
	   if (Coeficiente!=0) {


	 if (nt==0) {
		 nt=nt+1;
		 VC[lug]=Coeficiente;
		 VE[lug]=Exponente;
	 } else{
	 int i=0;
		bool Swich=false;
			while (i<nt){
			  if (VE[i]==Exponente) {
				  VC[i]=VC[i]+Coeficiente;
				   Swich=true;
			  }
			  i++;

			}
			if (!Swich) {
			  nt=nt+1;
			  VE[lug]=Exponente;
			  VC[lug]=Coeficiente;

			}
	 }
  }
 }


  void Polinomio::Sumar(Polinomio A){
  int i;
  for (i = 1; i <= A.nt; i++) {
   int exp=A.Get_Exponente(i);
   int coef=A.Coeficiente(exp);

	Poner_Termino(coef*exp,exp-1);

  }
 }

 void Polinomio::Sumar(Polinomio A,Polinomio B){
 int i;
   for (i = 1; i <= A.nt; i++) {
	 int exp=A.Get_Exponente(i);
   int coef=A.Coeficiente(exp);
	Poner_Termino(coef,exp);

   }


   for (i = 1; i <= B.nt; i++) {
	 int exp=B.Get_Exponente(i);
   int coef=B.Coeficiente(exp);
	Poner_Termino(coef,exp);

   }

 }
 void Polinomio::Multiplicar_por_menos1(){
   int i;
   for (i = 0; i < nt; i++) {
	  VC[i]=VC[i]*(-1);
   }

 }

 void Polinomio::Restar(Polinomio A,Polinomio B){
	  B.Multiplicar_por_menos1() ;
	  Sumar(A,B);

 }
 void Polinomio::Multiplicar(Polinomio A,Polinomio B){
  //hacer :V
  int i;
  for (i = 0; i < A.Num_De_Terminos(); i++) {
	  int j;
	  for (j = 0; j < B.Num_De_Terminos(); j++) {
			  int coef=A.VC[i]*B.VC[j];
			  int exp=A.VE[i]+B.VE[j];
			  Poner_Termino(coef,exp);
	  }
  }

 }
 void Polinomio::Derivar(){
	 int i;
	 for (i = 0; i < nt; i++) {
		int exp=Get_Exponente(i+1);
		int coef=Coeficiente(exp);
		   if (exp!=0) {


		   VC[i]=	coef*exp ;
		   VE[i]=exp-1;
		   }else{

		   VC[i]=	coef*exp ;
			}


	 }


 }

 void Polinomio::MostrarPolinomioEnStringGrid(TStringGrid *te,TStringGrid *tc){
   int i;
   te->ColCount=nt;
   tc->ColCount=nt;
   te->Width=nt*40;
   tc->Width=nt*40;
	 for (i = 0; i < nt; i++) {

		te->Cells[i][0]=VE[i];
		//tc->Cells[i][0]=VC[i];

		tc->Cells[i][0]=IntToStr(VC[i])+"x";

	 }


 }

 void Polinomio::GraficarEnCanvas(TCanvas *t){
  //dibujo de las Lineas de los ejes X y Y
   t->Pen->Color=clRed;
   t->MoveTo(300,0);
   t->LineTo(300,400);
   t->MoveTo(0,200);
   t->LineTo(600,200);

   //dibujo de los triangulos de las puntas de los ejes X y Y ----------------
   TPoint vertices[3];
	vertices[0] = Point(0,200);
	vertices[1] = Point(5,195);
	vertices[2] = Point(5,205);
	t->Polygon(vertices, 2);

	vertices[0] = Point(600,200);
	vertices[1] = Point(595,195);
	vertices[2] = Point(595,205);
	t->Polygon(vertices, 2);

	vertices[0] = Point(300,0);
	vertices[1] = Point(295,5);
	vertices[2] = Point(305,5);
	t->Polygon(vertices, 2);

	vertices[0] = Point(300,400);
	vertices[1] = Point(295,395);
	vertices[2] = Point(305,395);
	t->Polygon(vertices, 2);
	t->MoveTo(300,200);

	//dibujado de lineas en los ejes X y Y ------------------------------------

	//lineas del eje X
	int x=20;
	int y=195;
	int i;
	for (i = 1; i <= 30; i++) {
	t->MoveTo(x,y);
	t->LineTo(x,y+10);
	x=x+20;

	}

	//lineas del eje Y

	x=295;
	y=20;
	for (i = 1; i < 20; i++) {
	t->MoveTo(x,y);
	t->LineTo(x+10,y);
	y=y+20;
	}

   //colocado de los numeros en los ejes X y Y ----------------------------
	t->TextOutW(298,201,"0");

	//eje X
	x=317;
	y=202;
	for (i =1 ; i < 15; i++) {
		  t->TextOutW(x,y,IntToStr(i));
		  x=x+20;
	}

	x=272;
	for (i = 1; i < 15; i++) {
		 t->TextOutW(x,y,IntToStr(-i));
		  x=x-20;
	}
	//eje Y


	x=290;
	y=174;

	for (i = 1; i < 10; i++) {
		 t->TextOutW(x,y,IntToStr(i));
		 y=y-20;
	}

	y=214;
	x=285;
	for (i = 1; i < 10; i++) {
		 t->TextOutW(x,y,IntToStr(-i));
		 y=y+20;
	}


   //----------------------------------------------------------------------


  }
